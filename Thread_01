# Thread-Concept
Java多线程

一、线程的基本概念
    1、进程与线程
        基本上现在的操作系统都支持多任务，其中的任务可以理解为进程。一般情况下，当运行一个应用程序的时候，就启动了一个进程，当然有些会启动多个进程。
    通常把一个正在运行的程序看做是一个进程，而线程是进程中具体代码的执行单元。在一个进程里面，允许至少有一个或多个线程存在。可以用一个形象的比喻来理解程
    序、进程、线程这三者之间的关系。一个现代制造工厂(应用程序)，它里面包含完成不同组件的生产车间(进程)， 而在某个生产车间里面是完成具体工作的一线工人       (线程)。所以说线程是作为调度和分配的基本单位(实体)，进程作为拥有资源的基本单位(容器)、在新建一个进程时，操作系统就会为其分配独立的内存地址空间及相     关资源。就如同新建一个生产车间一样，需要给生产车间具体的房屋、 水电、设备等资源。
    2、线程的运行机制
        一个线程从创建到消亡称为线程的生命周期。线程的生命周期可以分为五个部分：
        （1）创建状态（New）
                 若创建了一个线程而没有启动它，那么此线程就处于创建状态。比如：Thread myThread = new Thread();
             处于创建状态的线程还没有获得应有的资源（或者是未得到所属进程的资源的共享），所以这是一个空的线程，线程
             只有通过启动后，系统才能给它分配资源。start是启动线程的方法，它的功能是为线程分配必要的系统资源，并且把线程置于可运行状态，以便系统
             可以调用这个线程。
        （2）就绪状态（Runnable），也被称为“可执行状态”。
                 若对一个创建的线程进行启动操作，那么这个线程就处于就绪状态。通过调用myThread.start()方法，myThread线程进入就绪状态。线程处于
             就绪状态说明它具备了运行条件，但就绪状态并不是运行状态，一个线程是否处于运行状态，除了必须处于就绪状态，还取决于系统的调度。
        （3）运行状态（Running）
                 线程获取CPU权限进行执行，需要注意的是：线程只能从就绪状态进入到运行状态。
        （4）阻塞状态（Blocked）
                阻塞状态是由运行状态转变过来的，一个运行状态的线程如果遇到睡眠(sleep)操作，就会进入阻寒状态。另外，如果一个线程跟I/O操
            作有关，外设的速度远低于处理器的速度，该线程可能会被阻塞，从而进入不可运行状态。外设处理完后，该线程会自动进入就绪状态。通常由两种途径可以             把一个线程从阻塞状态转为就绪状态。一是自动恢复，通过sleep或者由于I/O阻塞造成的not runnable可以自动恢复;         
                                           二是由notify 方法来恢复处于wait的线程。
        （5）消亡状态（Dead）
                一个线程在run()方法执行结束后进入消亡状态。不过，如果线程内执行了interrupt或stop方法，那么它也会以异常退出的方式进入消亡状态。
 二、线程的创建与启动
